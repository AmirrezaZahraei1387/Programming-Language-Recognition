[['S', [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], ['S#SNSNS', [['pragma', 'once'], ['pragma', 'once']]], ['S#SNS<SNS>S', [['include', 'guiddef.h'], ['include', 'Unknwn.h'], ['include', 'cerrno'], ['include', 'cstdio'], ['include', 'share.h'], ['include', 'Shlwapi.h'], ['include', 'filesystem'], ['include', 'optional'], ['include', 'string_view'], ['include', 'synchapi.h'], ['include', 'type_traits']]], ['S#SNS<SNS/SNS>S', [['include', 'winrt', 'base.h'], ['include', 'rapidjson', 'encodedstream.h'], ['include', 'rapidjson', 'filereadstream.h'], ['include', 'rapidjson', 'filewritestream.h'], ['include', 'rapidjson', 'prettywriter.h'], ['include', 'wil', 'resource.h'], ['include', 'winrt', 'Windows.ApplicationModel.Resources.Core.h'], ['include', 'wil', 'resource.h']]], ['S/S/SNSNSNSNSNS', [['forward', 'declare', 'namespaces', 'we', 'alias']]], ['SNSNS{S', [['namespace', 'winrt'], ['\tnamespace', 'Windows'], ['class', 'ConfigManager']]], ['SNSNS:S:SNS:S:SNS:S:SNS{S}S', [['\tnamespace', 'Microsoft', 'UI', 'Xaml', 'Controls'], ['\tnamespace', 'TranslucentTB', 'Xaml', 'Models', 'Primitives']]], ['SNSNS:S:SNS{S}S', [['\t\tnamespace', 'Foundation', 'Collections']]], ['SNSNS:S:SNS{S', [['\t\tnamespace', 'UI', 'Xaml']]], ['SNSNS{S}S', [['\t\t\tnamespace', 'Controls'], ['\t\t\tnamespace', 'Hosting']]], ['SNS}S', [['\t\t'], ['\t'], ['\t'], ['\t'], ['\t\t'], ['\t'], ['\t\t'], ['\t'], ['\t\t'], ['\t'], ['\t'], ['\t\t\t\t'], ['\t\t'], ['\t'], ['\t'], ['\t\t\t\t'], ['\t\t\t'], ['\t\t\t'], ['\t\t'], ['\t'], ['\t\t'], ['\t'], ['\t\t'], ['\t\t'], ['\t'], ['\t'], ['\t\t'], ['\t'], ['\t'], ['\t'], ['\t'], ['\t\t\t\t'], ['\t\t\t'], ['\t\t\t'], ['\t\t'], ['\t'], ['\t'], ['\t']]], ['S}S', [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], ['S/S/SNSNSNSNSNSNS', [['alias', 'some', 'long', 'namespaces', 'for', 'convenience']]], ['SNSNS=SNS:S:SNS:S:SNS:S:SNS;S', [['namespace', 'mux', 'winrt', 'Microsoft', 'UI', 'Xaml'], ['namespace', 'wux', 'winrt', 'Windows', 'UI', 'Xaml']]], ['SNSNS=SNS:S:SNS:S:SNS:S:SNS:S:SNS;S', [['namespace', 'muxc', 'winrt', 'Microsoft', 'UI', 'Xaml', 'Controls'], ['namespace', 'txmp', 'winrt', 'TranslucentTB', 'Xaml', 'Models', 'Primitives']]], ['SNSNS=SNS:S:SNS:S:SNS;S', [['namespace', 'wf', 'winrt', 'Windows', 'Foundation']]], ['SNSNS=SNS:S:SNS;S', [['namespace', 'wfc', 'wf', 'Collections'], ['namespace', 'wuxc', 'wux', 'Controls'], ['namespace', 'wuxh', 'wux', 'Hosting']]], ['S#SNS"SNS"S', [['include', 'configmanager.hpp'], ['include', 'winrt.hpp'], ['include', 'constants.hpp'], ['include', 'win32.hpp'], ['include', 'arch.h']]], ['S#SNS<SNS/SNS/SNS>S', [['include', 'rapidjson', 'error', 'error.h']]], ['S#SNS"SNS/SNS/SNS/SNS/SNS"S', [['include', '..', '..', 'ProgramLog', 'error', 'errno.hpp'], ['include', '..', '..', 'ProgramLog', 'error', 'rapidjson.hpp'], ['include', '..', '..', 'ProgramLog', 'error', 'std.hpp'], ['include', '..', '..', 'ProgramLog', 'error', 'win32.hpp'], ['include', '..', '..', 'ProgramLog', 'error', 'winrt.hpp']]], ['S#SNS"SNS/SNS/SNS/SNS"S', [['include', '..', '..', 'ProgramLog', 'log.hpp']]], ['S#SNS"SNS/SNS"S', [['include', 'config', 'rapidjsonhelper.hpp'], ['include', '..', 'localization.hpp'], ['include', 'config', 'config.hpp'], ['include', '..', 'folderwatcher.hpp']]], ['S#SNS"SNS/SNS/SNS"S', [['include', '..', 'resources', 'ids.h']]], ['SNS:S:SNS:S:SNSNS:S:SNS(SNSNS:S:SNS<SNS:S:SNS:S:SNS>S&SNS)S', [['std', 'filesystem', 'path', 'ConfigManager', 'DetermineConfigPath', 'const', 'std', 'optional', 'std', 'filesystem', 'path', 'storageFolder']]], ['S{S', [[], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], ['SNS:S:SNS:S:SNSNS;S', [['\tstd', 'filesystem', 'path', 'path'], ['\tstd', 'filesystem', 'path', 'm_ConfigPath']]], ['SNS(SNS)S', [['\tif', 'storageFolder'], ['\t\t\tif', 'firstLoad'], ['\t\tif', 'fileExists'], ['\tif', 'm_ReloadTimer'], ['\tm_Context', 'context'], ['\tif', 'm_ReloadTimer'], ['\tif', 'm_Config.DisableSaving']]], ['SNS{S', [['\t'], ['\t'], ['\t'], ['\t\t'], ['\t'], ['\t\t'], ['\t'], ['\t\t'], ['\t'], ['\t'], ['\t\t'], ['\t\t\t'], ['\t\t\t\t'], ['\t'], ['\t'], ['\t\t'], ['\t\t\t'], ['\t\t\t\t'], ['\t\t\t'], ['\t'], ['\t\t'], ['\t'], ['\t\t'], ['\t\t'], ['\t'], ['\t'], ['\t\t'], ['\t'], ['\t'], ['\t'], ['\t'], ['\t\t'], ['\t\t\t'], ['\t\t\t\t'], ['\t\t\t'], ['\t'], ['\t']]], ['SNS=S*SNS/SNS"SNS"S;S', [['\t\tpath', 'storageFolder', 'L', 'RoamingState']]], ['SNS', [['\telse'], ['\telse'], ['\t\ttry'], ['\telse'], ['\t\telse'], ['\t\t\telse'], ['\telse']]], ['SNSNS[SNSNS]S=SNS:S:SNS(S)S;S', [['\t\tconst', 'auto', 'loc,', 'hr', 'win32', 'GetExeLocation']]], ['SNS(SNSNS:S:SNS:S:SNSNS"SNSNSNSNSNS!S"S)S;S', [['\t\tHresultVerify', 'hr,', 'spdlog', 'level', 'critical,', 'L', 'Failed', 'to', 'determine', 'executable', 'location']]], ['SNS=SNS(S)S;S', [['\t\tpath', 'loc.parent_path']]], ['SNS/S=SNS;S', [['\tpath', 'CONFIG_FILE']]], ['SNSNS;S', [['\treturn', 'path'], ['\t\treturn', 'success'], ['\t\treturn', 'false'], ['\t\t\treturn', 'true'], ['\treturn', 'false'], ['\t\treturn', 'true'], ['\t\treturn', 'fileExists'], ['\t\t\treturn', 'true'], ['\treturn', 'false'], ['\tConfig', 'm_Config'], ['\tFolderWatcher', 'm_Watcher'], ['\tbool', 'm_ShownChangeWarning'], ['\tcallback_t', 'm_Callback'], ['\t\treturn', 'm_Config']]], ['SNSNS:S:SNS(SNS*SNSNSNS:S:SNSNS)S', [['void', 'ConfigManager', 'WatcherCallback', 'void', 'context,', 'DWORD,', 'std', 'wstring_view', 'fileName']]], ['SNS(SNS(S)S|S|SNS:S:SNS(SNSNS)S)S', [['\tif', 'fileName.empty', 'win32', 'IsSameFilename', 'fileName,', 'CONFIG_FILE']]], ['SNSNSNS=SNS<SNS*S>S(SNS)S;S', [['\t\tconst', 'auto', 'that', 'static_cast', 'ConfigManager', 'context']]], ['SNS(S!SNS-S>SNS(S)S)S', [['\t\tif', 'that', 'ScheduleReload']]], ['SNS-S>SNS(S)S;S', [['\t\t\tthat', 'Reload']]], ['SNSNS:S:SNS(SNS*SNSNSNS)S', [['void', 'ConfigManager', 'TimerCallback', 'void', 'context,', 'DWORD,', 'DWORD']]], ['SNS<SNS*S>S(SNS)S-S>SNS(S)S;S', [['\tstatic_cast', 'ConfigManager', 'context', 'Reload']]], ['SNSNS:S:SNS(S)SNS', [['bool', 'ConfigManager', 'TryOpenConfigAsJson', 'noexcept'], ['void', 'ConfigManager', 'SaveConfig', 'const']]], ['SNS:S:SNSNS;S', [['\twil', 'unique_hkey', 'key'], ['\tstd', 'error_code', 'errc'], ['\twil', 'unique_file', 'file'], ['\twil', 'unique_handle', 'm_ReloadTimer'], ['\tstd', 'wstring', 'm_StartupLanguage']]], ['SNSNSNS=SNS(SNS|SNSNSNS"SNS"SNSNS"SNS"SNSNS(S)S)S;S', [['\tconst', 'HRESULT', 'hr', 'AssocQueryKey', 'ASSOCF_VERIFY', 'ASSOCF_INIT_IGNOREUNKNOWN,', 'ASSOCKEY_SHELLEXECCLASS,', 'L', '.json', ',', 'L', 'open', ',', 'key.put']]], ['SNS(SNS(SNS)S)S', [['\tif', 'SUCCEEDED', 'hr']]], ['SNSNS=S{S', [['\t\tSHELLEXECUTEINFO', 'info']]], ['SNS=SNS(SNS)SNS', [['\t\t\t.cbSize', 'sizeof', 'info', ',']]], ['SNS=SNS|SNS', [['\t\t\t.fMask', 'SEE_MASK_CLASSKEY', 'SEE_MASK_FLAG_NO_UI,']]], ['SNS=SNS"SNS"SNS', [['\t\t\t.lpVerb', 'L', 'open', ',']]], ['SNS=SNS(S)SNS', [['\t\t\t.lpFile', 'm_ConfigPath.c_str', ',']]], ['SNS=SNS', [['\t\t\t.nShow', 'SW_SHOW,']]], ['SNS=SNS(S)S', [['\t\t\t.hkeyClass', 'key.get']]], ['SNS}S;S', [['\t\t']]], ['SNSNSNS=SNS(S&SNS)S;S', [['\t\tconst', 'bool', 'success', 'ShellExecuteEx', 'info']]], ['SNS(S!SNS)S', [['\t\tif', 'success'], ['\tif', 'm_ReloadTimer']]], ['SNS(SNS:S:SNS:S:SNSNS"SNSNSNSNSNSNS"S)S;S', [['\t\t\tLastErrorHandle', 'spdlog', 'level', 'warn,', 'L', 'Failed', 'to', 'launch', 'JSON', 'file', 'editor'], ['\t\t\t\t\tLastErrorHandle', 'spdlog', 'level', 'err,', 'L', 'Failed', 'to', 'move', 'temporary', 'configuration', 'file']]], ['SNS(SNS!S=SNS(SNS)S)S', [['\t\tif', 'hr', 'HRESULT_FROM_WIN32', 'ERROR_NO_ASSOCIATION']]], ['SNS(SNSNS:S:SNS:S:SNSNS"SNSNSNSNSNSNSNS"S)S;S', [['\t\t\tHresultHandle', 'hr,', 'spdlog', 'level', 'warn,', 'L', 'Failed', 'to', 'query', 'for', '.json', 'file', 'association']]], ['SNSNS:S:SNS(SNS*SNS)SNS', [['void', 'ConfigManager', 'SaveToFile', 'FILE', 'f', 'const']]], ['SNSNSNS:S:SNSNS=S"S/S/SNSNS:S/S/S"SNS"SNS/SNSNSNSNS\\SNS"S;S', [['\tstatic', 'constexpr', 'std', 'string_view', 'COMMENT', 'See', 'https', 'UTF8_APP_NAME', '.github.io', 'config', 'for', 'more', 'information', 'n']]], ['SNSNSNS:S:SNSNS=SNS"SNS:S/S/SNS/S"SNSNS"S/SNS"S;S', [['\tstatic', 'constexpr', 'std', 'wstring_view', 'SCHEMA', 'L', 'https', 'sylveon.dev', 'APP_NAME', 'L', 'schema']]], ['SNSNS[SNS]S;S', [['\tchar', 'buffer', '1024'], ['\tchar', 'buffer', '1024']]], ['SNS:S:SNSNS(SNSNSNS:S:SNS(SNS)S)S;S', [['\trj', 'FileWriteStream', 'filestream', 'f,', 'buffer,', 'std', 'size', 'buffer'], ['\trj', 'FileReadStream', 'filestream', 'f,', 'buffer,', 'std', 'size', 'buffer']]], ['SNSNS=SNS:S:SNS<SNS:S:SNS<S>SNSNS:S:SNS>S;S', [['\tusing', 'OutputStream', 'rj', 'EncodedOutputStream', 'rj', 'UTF8', ',', 'rj', 'FileWriteStream']]], ['SNSNS(SNSNS)S;S', [['\tOutputStream', 'out', 'filestream,', 'true']]], ['SNS(SNSNSNS:SNS)S', [['\tfor', 'const', 'char', 'c', 'COMMENT']]], ['SNS(SNS)S;S', [['\t\tout.Put', 'c'], ['\tm_Config.Serialize', 'writer'], ['\tm_Callback', 'm_Context']]], ['SNS:S:SNS<SNSNS:S:SNS<S>S>SNS(SNS)S;S', [['\trj', 'PrettyWriter', 'OutputStream,', 'rj', 'UTF16LE', 'writer', 'out']]], ["SNS(S'S'SNSNS)S;S", [['\twriter.SetIndent', ',', '2']]], ['SNS(S)S;S', [['\twriter.StartObject'], ['\twriter.EndObject'], ['\twriter.Flush'], ['\tLoad'], ['\tUpdateVerbosity'], ['\tUpdateVerbosity'], ['\tSaveConfig'], ['\t\tfile.reset']]], ['SNS:S:SNS(SNSNSNS)S;S', [['\trjh', 'Serialize', 'writer,', 'SCHEMA,', 'SCHEMA_KEY']]], ['SNSNS:S:SNS(SNS*SNS)S', [['bool', 'ConfigManager', 'LoadFromFile', 'FILE', 'f']]], ['SNSNSNS:S:SNSNS=SNS"SNSNSNSNSNS"S;S', [['\tstatic', 'constexpr', 'std', 'wstring_view', 'DESERIALIZE_FAILED', 'L', 'Failed', 'to', 'deserialize', 'JSON', 'document']]], ['SNS:S:SNS<SNSNS:S:SNS>SNS(SNS)S;S', [['\trj', 'AutoUTFInputStream', 'uint32_t,', 'rj', 'FileReadStream', 'in', 'filestream']]], ['SNS:S:SNS<SNS:S:SNS<S>S>SNS;S', [['\trj', 'GenericDocument', 'rj', 'UTF16LE', 'doc']]], ['SNS(SNSNS:S:SNSNS=SNS<SNS:S:SNSNS:S:SNS<SNS>S>S(SNS)S)S', [['\tif', 'const', 'rj', 'ParseResult', 'result', 'doc.ParseStream', 'rj', 'kParseCommentsFlag,', 'rj', 'AutoUTF', 'uint32_t', 'in']]], ['SNS/S/SNSNSNSNSNSNSNSNSNSNSNS', [['\t\t', 'remove', 'the', 'schema', 'key', 'to', 'avoid', 'a', 'false', 'unknown', 'key', 'warning']]], ['SNS(SNS:S:SNS(SNS)S)S;S', [['\t\tdoc.RemoveMember', 'rjh', 'StringViewToValue', 'SCHEMA_KEY']]], ['SNS/S/SNSNSNSNSNSNSNSNSNSNS', [['\t\t\t', 'load', 'the', 'defaults', 'before', 'deserializing', 'to', 'not', 'reuse', 'previous', 'settings'], ['\t', 'we', 'use', 'settings.json', 'because', 'it', 'makes', 'VS', 'Code', 'automatically', 'recognize']]], ['SNS/S/SNSNSNSNSNSNSNSNSNS', [['\t\t\t', 'in', 'case', 'some', 'keys', 'are', 'missing', 'from', 'the', 'file'], ['\t\t\t\t', 'try', 'using', 'the', 'new', 'locale', 'for', 'that', 'dialog', 'box']]], ['SNS=S{S}S;S', [['\t\t\tm_Config'], ['\tm_Config'], ['\t\tm_Config']]], ['SNS(SNS[S]S(SNS:S:SNSNS)S', [['\t\t\tm_Config.Deserialize', 'doc,', 'std', 'wstring_view', 'unknownKey']]], ['SNS(SNS:S:SNS<SNS:S:SNS:S:SNS>S(S)S)S', [['\t\t\t\tif', 'Error', 'ShouldLog', 'spdlog', 'level', 'info']]], ['SNS(SNS:S:SNS:S:SNSNS:S:SNS(SNS"SNSNSNSNSNS:S{S}S"SNSNS)S)S;S', [['\t\t\t\t\tMessagePrint', 'spdlog', 'level', 'info,', 'std', 'format', 'L', 'Unknown', 'key', 'found', 'in', 'JSON', ',', 'unknownKey']]], ['SNS}S)S;S', [['\t\t\t']]], ['SNS/S/SNSNSNSNSNSNS!S', [['\t\t\t', 'everything', 'went', 'fine,', 'we', 'can', 'return']]], ['SNS(SNS:S:SNS:S:SNSNS)S', [['\t\tHelperDeserializationErrorCatch', 'spdlog', 'level', 'err,', 'DESERIALIZE_FAILED']]], ['SNS(SNS:S:SNS:S:SNSNS)S;S', [['\t\tStdSystemErrorCatch', 'spdlog', 'level', 'err,', 'DESERIALIZE_FAILED']]], ['SNSNS(SNS(S)S!S=SNS:S:SNS)S', [['\telse', 'if', 'result.Code', 'rj', 'kParseErrorDocumentEmpty']]], ['SNS(SNS(S)SNSNS:S:SNS:S:SNSNS)S;S', [['\t\tParseErrorCodeHandle', 'result.Code', ',', 'spdlog', 'level', 'err,', 'DESERIALIZE_FAILED']]], ['SNS/S/SNSNSNSNS', [['\t', 'parsing', 'failed,', 'use', 'defaults'], ['\t\t', 'ways', 'editors', 'save', 'files.']]], ['SNSNS:S:SNS(SNSNS)S', [['bool', 'ConfigManager', 'Load', 'bool', 'firstLoad']]], ['SNS(SNSNS:S:SNSNS{SNS(SNS(S)SNSNS"SNS"SNSNS)S}S)S', [['\tif', 'const', 'wil', 'unique_file', 'file', '_wfsopen', 'm_ConfigPath.c_str', ',', 'L', 'rbS', ',', '_SH_DENYNO']]], ['SNS(SNS(SNS(S)S)S)S', [['\t\tif', 'LoadFromFile', 'file.get']]], ['SNS(S!SNS(S)S&S&SNS:S:SNS(SNS)S)S', [['\t\t\t\tif', 'm_Config.Language.empty', 'Localization', 'SetProcessLangOverride', 'm_Config.Language']]], ['SNS=SNS;S', [['\t\t\t\t\tm_StartupLanguage', 'm_Config.Language']]], ['SNSNS(SNS!S=SNS&S&S!SNS:S:SNS(SNSNS)S)S', [['\t\t\telse', 'if', 'm_StartupLanguage', 'm_Config.Language', 'std', 'exchange', 'm_ShownChangeWarning,', 'true']]], ['SNSNS=SNS(SNS(S)SNSNS)S;S', [['\t\t\t\tLCID', 'newLang', 'LocaleNameToLCID', 'm_Config.Language.c_str', ',', 'LOCALE_ALLOW_NEUTRAL_NAMES']]], ['SNS:S:SNS(SNSNS|SNS|SNSNS:S:SNS(S)SNSNS?SNS(SNS)S:SNS(SNSNS)S)SNS(S)S;S', [['\t\t\t\tLocalization', 'ShowLocalizedMessageBox', 'IDS_LANGUAGE_CHANGED,', 'MB_OK', 'MB_ICONINFORMATION', 'MB_SETFOREGROUND,', 'wil', 'GetModuleInstanceHandle', ',', 'newLang', 'LANGIDFROMLCID', 'newLang', 'MAKELANGID', 'LANG_NEUTRAL,', 'SUBLANG_NEUTRAL', '.detach']]], ['SNS/S/SNS:SNSNSNSNSNSNSNSNSNSNS', [['\t\t', 'note', 'this', 'demarks', 'if', 'the', 'file', 'exists,', 'even', 'if', 'parsing', 'failed.']]], ['SNSNSNS=SNS;S', [['\t\tconst', 'errno_t', 'err', 'errno']]], ['SNSNSNS=SNS!S=SNS;S', [['\t\tconst', 'bool', 'fileExists', 'err', 'ENOENT']]], ['SNS/S/SNSNSNSNSNSNSNSNSNSNSNSNS', [['\t\t\t', 'if', 'the', 'file', 'failed', 'to', 'open,', 'but', 'it', 'exists,', 'something', 'went', 'wrong'], ['\t\t', '200', 'ms,', 'relative', 'to', 'current', 'time.', 'arbitrarily', 'chosen', 'to', 'get', 'a', 'balance'], ['\t\t', 'between', 'feeling', 'snappy', 'and', 'not', 'triggering', 'errors', 'due', 'to', 'the', 'various', 'weird']]], ['SNS(SNSNS:S:SNS:S:SNSNS"SNSNSNSNSNS"S)S;S', [['\t\t\tErrnoTHandle', 'err,', 'spdlog', 'level', 'err,', 'L', 'Failed', 'to', 'open', 'configuration', 'file'], ['\tStdErrorCodeVerify', 'errc,', 'spdlog', 'level', 'warn,', 'L', 'Failed', 'to', 'delete', 'config', 'file']]], ['SNS/S/SNSNSNSNSNS', [['\t\t', 'opening', 'file', 'failed,', 'use', 'defaults']]], ['SNSNS:S:SNS(S)S', [['void', 'ConfigManager', 'Reload'], ['bool', 'ConfigManager', 'ScheduleReload'], ['void', 'ConfigManager', 'UpdateVerbosity'], ['void', 'ConfigManager', 'EditConfigFile'], ['void', 'ConfigManager', 'DeleteConfigFile']]], ['SNSNS{S}S;S', [['\t\tLARGE_INTEGER', 'waitTime']]], ['SNS=S-SNS;S', [['\t\twaitTime.QuadPart', '2000000']]], ['SNS(SNS(SNS(S)SNS&SNSNSNSNSNS)S)S', [['\t\tif', 'SetWaitableTimer', 'm_ReloadTimer.get', ',', 'waitTime,', '0,', 'TimerCallback,', 'this,', 'false']]], ['SNS(SNS:S:SNS:S:SNSNS"SNSNSNSNSNS"S)S;S', [['\t\t\tLastErrorHandle', 'spdlog', 'level', 'warn,', 'L', 'Failed', 'to', 'set', 'waitable', 'timer'], ['\t\tLastErrorHandle', 'spdlog', 'level', 'warn,', 'L', 'Failed', 'to', 'create', 'waitable', 'timer'], ['\t\t\tLastErrorHandle', 'spdlog', 'level', 'info,', 'L', 'Failed', 'to', 'cancel', 'reload', 'timer']]], ['SNS:S:SNS(SNSNS:S:SNS<SNS:S:SNS:S:SNS>S&SNSNS&SNSNSNSNS*SNS)S:S', [['ConfigManager', 'ConfigManager', 'const', 'std', 'optional', 'std', 'filesystem', 'path', 'storageFolder,', 'bool', 'fileExists,', 'callback_t', 'callback,', 'void', 'context']]], ['SNS(SNS(SNS)S)SNS', [['\tm_ConfigPath', 'DetermineConfigPath', 'storageFolder', ',']]], ['SNS(SNS(S)SNSNSNS|SNS|SNSNSNS)SNS', [['\tm_Watcher', 'm_ConfigPath.parent_path', ',', 'false,', 'FILE_NOTIFY_CHANGE_FILE_NAME', 'FILE_NOTIFY_CHANGE_SIZE', 'FILE_NOTIFY_CHANGE_LAST_WRITE,', 'WatcherCallback,', 'this', ',']]], ['SNS(SNS(SNSNSNS)S)SNS', [['\tm_ReloadTimer', 'CreateWaitableTimer', 'nullptr,', 'true,', 'nullptr', ',']]], ['SNS(SNS)SNS', [['\tm_ShownChangeWarning', 'false', ','], ['\tm_Callback', 'callback', ',']]], ['SNS=SNS(SNS)S;S', [['\tfileExists', 'Load', 'true']]], ['SNS:S:S~SNS(S)S', [['ConfigManager', 'ConfigManager']]], ['SNS(S!SNS(SNS(S)S)S)S', [['\t\tif', 'CancelWaitableTimer', 'm_ReloadTimer.get']]], ['SNS(SNSNSNS=SNS:S:SNS(S)S)S', [['\tif', 'const', 'auto', 'sink', 'Log', 'GetSink']]], ['SNS-S>SNS(SNS)S;S', [['\t\tsink', 'set_level', 'm_Config.LogVerbosity']]], ['SNS(S!SNS(S)S)S', [['\tif', 'TryOpenConfigAsJson']]], ['SNS(SNS:S:SNS(SNS)SNSNS:S:SNS:S:SNSNS"SNSNSNSNSNS"S)S;S', [['\t\tHresultVerify', 'win32', 'EditFile', 'm_ConfigPath', ',', 'spdlog', 'level', 'err,', 'L', 'Failed', 'to', 'open', 'configuration', 'file.']]], ['SNS:S:SNS:S:SNS(SNSNS)S;S', [['\tstd', 'filesystem', 'remove', 'm_ConfigPath,', 'errc']]], ['SNS;S', [['\t\treturn']]], ['SNS:S:SNS:S:SNSNS=SNS;S', [['\tstd', 'filesystem', 'path', 'tempFile', 'm_ConfigPath']]], ['SNS(SNS"SNS"S)S;S', [['\ttempFile.replace_extension', 'L', '.tmp']]], ['SNSNSNS=SNS(SNS(S)SNSNS(S)SNSNS"SNS"S)S;S', [['\tconst', 'errno_t', 'err', '_wfopen_s', 'file.put', ',', 'tempFile.c_str', ',', 'L', 'wbS']]], ['SNS(SNS=S=SNS)S', [['\tif', 'err', '0']]], ['SNS(SNS(S)S)S;S', [['\t\tSaveToFile', 'file.get']]], ['SNS(S!SNS(SNS(S)SNSNS(S)SNSNSNS|SNS|SNSNSNS)S)S', [['\t\tif', 'ReplaceFile', 'm_ConfigPath.c_str', ',', 'tempFile.c_str', ',', 'nullptr,', 'REPLACEFILE_WRITE_THROUGH', 'REPLACEFILE_IGNORE_MERGE_ERRORS', 'REPLACEFILE_IGNORE_ACL_ERRORS,', 'nullptr,', 'nullptr']]], ["SNS/S/SNSNSNSNSNS'SNSNS(SNSNSNSNSNSNS)SNSNSNS", [['\t\t\t', 'If', 'the', 'target', 'file', 'doesn', 't', 'exist', 'e.g.', 'brand', 'new', 'installation', 'of', 'TranslucentTB', ',', 'ReplaceFile', 'fails.']]], ['SNS(SNSNSNS=SNS(S)S;SNS=S=SNS)S', [['\t\t\tif', 'const', 'auto', 'lastErr', 'GetLastError', 'lastErr', 'ERROR_FILE_NOT_FOUND']]], ['SNS(S!SNS(SNS(S)SNSNS(S)SNSNS)S)S', [['\t\t\t\tif', 'MoveFileEx', 'tempFile.c_str', ',', 'm_ConfigPath.c_str', ',', 'MOVEFILE_WRITE_THROUGH']]], ['SNS(SNS(SNS)SNSNS:S:SNS:S:SNSNS"SNSNSNSNSNS"S)S;S', [['\t\t\t\tHresultHandle', 'HRESULT_FROM_WIN32', 'lastErr', ',', 'spdlog', 'level', 'err,', 'L', 'Failed', 'to', 'replace', 'configuration', 'file']]], ['SNS(SNSNS:S:SNS:S:SNSNS"SNSNSNSNS!S"S)S;S', [['\t\tErrnoTHandle', 'err,', 'spdlog', 'level', 'err,', 'L', 'Failed', 'to', 'save', 'configuration']]], ['SNS/S/SNSNSNSNSNSNS', [['\t', 'the', 'file', 'as', 'JSON', 'with', 'comments']]], ['SNSNSNS:S:SNSNS=SNS"SNS"S;S', [['\tstatic', 'constexpr', 'std', 'wstring_view', 'CONFIG_FILE', 'L', 'settings.json']]], ['SNSNSNS:S:SNSNS=SNS"S$SNS"S;S', [['\tstatic', 'constexpr', 'std', 'wstring_view', 'SCHEMA_KEY', 'L', 'schema']]], ['SNSNS=SNS:S:SNS<SNS(SNS*S)S>S;S', [['\tusing', 'callback_t', 'std', 'add_pointer_t', 'void', 'void']]], ['SNSNS:S:SNS:S:SNSNS(SNSNS:S:SNS<SNS:S:SNS:S:SNS>S&SNS)S;S', [['\tstatic', 'std', 'filesystem', 'path', 'DetermineConfigPath', 'const', 'std', 'optional', 'std', 'filesystem', 'path', 'storageFolder']]], ['SNSNSNS(SNS*SNSNSNS:S:SNSNS)S;S', [['\tstatic', 'void', 'WatcherCallback', 'void', 'context,', 'DWORD,', 'std', 'wstring_view', 'fileName']]], ['SNSNSNSNS(SNS*SNSNSNSNSNS)S;S', [['\tstatic', 'void', 'APIENTRY', 'TimerCallback', 'void', 'context,', 'DWORD', 'timerLow,', 'DWORD', 'timerHigh']]], ['SNS*SNS;S', [['\tvoid', 'm_Context']]], ['SNSNS(S)SNS;S', [['\tbool', 'TryOpenConfigAsJson', 'noexcept'], ['\tvoid', 'SaveConfig', 'const']]], ['SNSNS(SNS*SNS)SNS;S', [['\tvoid', 'SaveToFile', 'FILE', 'f', 'const']]], ['SNSNS(SNS*SNS)S;S', [['\tbool', 'LoadFromFile', 'FILE', 'f']]], ['SNSNS(SNSNS=SNS)S;S', [['\tbool', 'Load', 'bool', 'firstLoad', 'false']]], ['SNSNS(S)S;S', [['\tvoid', 'Reload'], ['\tbool', 'ScheduleReload'], ['\tvoid', 'UpdateVerbosity'], ['\tvoid', 'EditConfigFile'], ['\tvoid', 'DeleteConfigFile']]], ['SNS:S', [['public']]], ['SNS(SNSNS:S:SNS<SNS:S:SNS:S:SNS>S&SNSNS&SNSNSNSNS*SNS)S;S', [['\tConfigManager', 'const', 'std', 'optional', 'std', 'filesystem', 'path', 'storageFolder,', 'bool', 'fileExists,', 'callback_t', 'callback,', 'void', 'context']]], ['SNS~SNS(S)S;S', [['\t', 'ConfigManager']]], ['SNSNS&SNS(S)SNS', [['\tconstexpr', 'Config', 'GetConfig', 'noexcept']]]]